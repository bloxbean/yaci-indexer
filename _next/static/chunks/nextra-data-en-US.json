{"/about":{"title":"About","data":{"":"//TODO"}},"/build_run":{"title":"Build Run","data":{"how-to-run#How to Run":"Pre-requisites: Java 21\nDownload the latest binary and property file from release page\nYou need to download yaci-store-all-<version>.jar and application.properties files\nCreate a sub folder config and copy application.properties file to config directory\nEdit application.properties file to configure your datasource and network details\nRun java -jar yaci-store-all-<version>.jar from the directory where you have copied the jar file.","build-from-source-and-run#Build from source and Run":"Pre-requisites: Java 21","build#Build":"$> git clone https://github.com/bloxbean/yaci-store\n$> cd yaci-store\n$> ./gradlew clean build","run#Run":"$> cd yaci-store\n$> edit config/application.properties //datasource, network details\n$> java -jar applications/all/build/libs/yaci-store-all-<version>.jar"}},"/design":{"title":"Design","data":{"goals#Goals":"Some of the high-level goals of Yaci Store are:\nProviding a Java library for creating scoped indexers.\nHandling the common logic required for data indexing.\nAllowing applications to select the data they wish to index.\nEnabling developers to filter data based on various conditions.\nPermitting developers to override default behaviors.\nManaging rollbacks.\nOffering an out-of-the-box application for indexing common data.","yaci-store---design#Yaci Store - Design":"","core#Core":"The core module is the backbone of Yaci Store. It is responsible for reading data from Cardano blockchain and broadcasting events.\nIt also monitors and records the current point in the database.\nEvents are published as Spring events, so developers can write their own Spring event listeners to listen these events and process them accordingly.","stores#Stores":"Each store is a specialized module designed for a specific data type or use case.A store has the ability to:\nListen to events published by the core module.\nProcess data.\nStore data in a persistent store.\nPublish derived events. (Optional)\nProvide REST endpoints to retrieve data (optional).\nEach of the above functionalities can be overridden by developers through the use of Spring Beans.Note: To simplify the rollback process, stores do not handle any data aggregation.","aggregates#Aggregates":"Aggregates are modules that handle different kind of data aggregation. They are responsible for aggregating data from different stores and persisting them in a persistent store.\nCurrently, the only available aggregate is \"Account\", which provides account balance related data. It depends on the \"utxo\" store and the event published by utxo store.\nBut status of this module is still experimental.","persistence#Persistence":"By default, Yaci Store uses a relational database to store data. The database schema is generated automatically by Flyway.\nSupported databases include: PostgreSQL, MySQL, H2An application can also use a custom persistence store by implementing a store's Storage api.","tx-submission#Tx Submission":"The \"submit\" module provides the ability to submit transactions to nodes directly, either through n2c or the submit API.","stores---components#Stores - Components":"A store is composed of the following components:1. Processor: A processor is responsible for processing data. It listens to events published by the core module and processes the data contained in the event. A processor can also publish derived events.\nFor example: UtxoProcessor in the utxo store listens to TransactionEvent and processes the UTxOs contained in the transaction. It also publishes AddressUtxo derived event for each UTxO.Developer can write their own processor by listening to events published by the core module.2. Storage: A storage defines the interface for storing data. The implementation of a storage api is responsible for storing data in a persistent store.\nBy default, Yaci Store uses a relational database to store data and each store provides a default implementation of corresponding storage api using JPA.This can be overridden by developers by implementing the storage api in consuming applications.3. Controller: A controller provides REST endpoints to retrieve store's data. It uses the storage api to retrieve data from the persistent store.\nOut of the box, Yaci Store provides some common REST endpoints for all stores. But, developers can implement their own REST endpoints.","handling-rollbacks#Handling Rollbacks":"Yaci Store follows a simply strategy to handle rollbacks. As store modules don't handle any data aggregation, the rollback handling becomes simple.\nEach table in a store maintains a slot column. When a processor received a RollbackEvent event, it deletes all the records with a slot greater than\nthe rollback slot mentioned in the event.But as aggregates handle data aggregation, the rollback handling becomes a bit complex. But with a simple strategy, we can handle rollbacks in aggregates as well.\nFor example, the Account module aggregates account balance. But instead of storing the account balance for an address in one record, balance snapshot is stored for a slot.\nAs we don't update existing records during aggregation, rollback can be handled by simply deleting all the records with a slot greater than the rollback slot mentioned in the event.If you are using Yaci Store as a library in your application with your own domain model and tables, you can follow the similar strategy to handle rollbacks.","idempotency#Idempotency":"Though Yaci Store ensures that the same event is not published more than once, it is possible that the same event is published more than once in some scenarios. All out-of-box\nmodules are idepotent. But if you are writing your own stores, you should make sure that your modules are idempotent.","yaci-store---sequential-block-processing#Yaci Store - Sequential Block Processing":"","yaci-store---parallel-block-processing#Yaci Store - Parallel Block Processing":""}},"/docker":{"title":"Run with Docker Compose","data":{"":"There are three out-of-the-box applications available in the Yaci Store repository:\nYaci Store Utxo Indexer : Includes Utxo Store, Epoch Store, and Submit component\nYaci Store All : Includes all stores\nYaci Store Aggregation : Aggregates account balances\nYou can run out-of-the-box applications with Docker Compose. The Docker Compose YAML files for the applications are inside\nthe docker folder in GitHub repository.\nPlease clone the repository to access the Docker Compose files.\nVerify compose yaml file are pointing to the correct application image version.","pre-requisites#Pre-requisites":"Docker","environment-files#Environment Files":"There are three configuration files available in docker folder:\nenv - Environment variables like JAVA_OPTS\napplication.properties - Contains application specific properties. (e.g; Cardano node host, port, database info, store configuration etc.)\napplication-aggr.properties - Contains Aggregation application specific properties.\nPlease configure Cardano Host, Port, and Protocol magic in the application.properties file.","docker-compose-files#Docker Compose Files":"In the following sections, we will use *-monolith.yml files. These files help to run both Postgres and the application\nthrough a single Docker Compose file. If you want to run the application with an external database, you can use application-specific\nDocker Compose files, such as yaci-store-all.yml, yaci-store-utxo-indexer.yml, or yaci-store-aggregation.yml.","db-indexes-after-initial-sync#DB Indexes (After Initial Sync)":"During the initial sync with the yaci-store-all or yaci-store-utxo-indexer apps, the app automatically removes all optional DB indexes\nto speed up the sync process. Once the sync is completed, you need to manually re-apply those missing indexes for faster queries.The SQL file of indexes that need to be re-applied can be found in the GitHub repository:\nYaci Store All App : create-index.sql\nUtxo Indexer App : create-index.sql","run-yaci-store-all-application#Run Yaci Store ALL application":"This application includes all stores.By default, the submit endpoint is disabled. You can refer to the Enable Submit Endpoint section for instructions on how to enable it.One of the advantages of Yaci Store is that you can decide what data to store. If you want to disable any specific store\nor its API endpoints, you have that flexibility.\nTo disable a specific store, you can set the store.<store_name>.enabled property to false in application.properties.\nTo disable a specific store's API endpoints, you can set the store.<store_name>.api-enabled environment variable to false in application.properties.\ndocker compose -f yaci-store-all-monolith.yml up -d\nYou can access swagger-ui at http://localhost:8080/swagger-ui/index.html\nNote:\nWhen a store is disabled, the store specific data will not be processed and stored in the database. However, the store specific tables will be created in the database.\nThis will be fixed in the future release.\nAccount Aggregation :\nIt also includes the account aggregation module, but it is disabled by default. Instead of enabling this module,\nit's recommended to run the aggregation-app separately for calculating account balances.","run-utxo-indexer-application#Run Utxo Indexer application":"The Utxo Indexer application consists of the utxo store, epoch store, and submit component.By default, the submit endpoint is disabled. You can refer to the Enable Submit Endpoint  section for instructions on how to enable it.\ndocker compose -f yaci-store-utxo-indexer-monolith.yml up -d","run-aggregation-app-to-calculate-account-balances#Run Aggregation App to calculate account balances":"Aggregation App is a separate application that calculates account balances by aggregating the UTXO store data.\ndocker compose -f yaci-store-aggregation-monolith.yml up -d","enable-submit-endpoint#Enable Submit Endpoint":"Both the yaci-store-all and yaci-store-utxo-indexer applications provide submit and script cost evaluation endpoints.\nHowever, these endpoints are disabled by default.In application.properties file :\nTo enable the submit endpoint, you need to configure the store.cardano.submit-api-url endpoint.\nTo enable both the submit and script cost evaluation endpoints, you need to set the store.cardano.ogmios-url.\nIf both submit api url and ogmios url are configured, submit api url will be used for tx submission and ogmios url will be used for script cost evaluation."}},"/":{"title":"Index","data":{"whats-yaci-store#What's Yaci Store?":"Yaci Store is a modular Java library for Java developers who are keen on constructing their custom indexer solutions.\nIts architecture ensures that every component within Yaci Store is accessible both as a standalone Java library and a\ncorresponding Spring Boot starter.Developers have the flexibility to select the specific modules that align with their project requirements.Supported Databases (Out-of-box) : PostgreSQL, MySQL, H2","yaci-store-application#Yaci Store application":"Yaci Store also offers an out-of-box application that indexes commonly-used data sets using the available modules.","yaci-store-modules#Yaci Store Modules":"The modules in Yaci Store are divided into three main categories:\nCore Modules\nStores\nAggregates","1-core-modules#1. Core Modules":"Core modules serve a critical purpose. They read data directly from Cardano blockchain and then publish various domain-specific events.\nSince these events are essentially Spring events, developers have the freedom to write their own Spring event listeners.\nThis allows them to tap into these events and process them accordingly. In addition to this, the core module monitors and records\nthe current point in the database.Major core modules include:\ncore\ncommon\nevents\nEvents published by core modules:\nBlockEvent\nBlockHeaderEvent\nByronEbBlockEvent\nByronMainBlockEvent\nRollbackEvent\nTransactionEvent\nMintBurnEvent\nScriptEvent\nCertificateEvent\nGenesisBlockEvent\nAuxDataEvent\nGovernanceEvent\nDerived Events: Events published by stores\nAddressUtxoEvent\nTxAssetEvent\nTxMetadataEvent\nDatumEvent\nTxScriptEvent","2-stores#2. Stores":"A \"store\" in Yaci Store is a specialized module designed for a specific data type or use case. Each store has a set of capabilities:\nEvent Listening: Listen to events published by the core module.\nData Processing: Processes event data.\nData Persistence: Saves processed data to a dedicated persistence store.\nREST Endpoints: Optionally provides REST endpoints for data retrieval.\nAvailable Store Implementations:\nutxo: Focuses on UTxOs, extracting them from transaction data.\nblock: Dedicated to handling and storing block data.\ntransaction: Takes care of transaction data.\nassets: Manages data related to asset minting and burning.\nmetadata: Retrieves and processes metadata events.\nscript: Deals with the ScriptEvent, get datums and redeemers.\nstaking: Handles from stake address registration to pool registration and more.\nmir: All about Mir data.\nepoch: Stores protocol params proposals and epoch protocol params. It also fetches protocol parameters from nodes via n2c.\ngovernance: Manages governance on-chain data.\nAdditional Modules:\nsubmit: Enables transaction submissions to nodes, either through n2c or the submit API.\nEach of the mentioned stores is available as a Spring Boot starter. This means that integrating a specific store into your\napplication is as straightforward as adding its Spring Boot starter as a dependency.","3-aggregates#3. Aggregates":"Aggregates are modules that handle different kind of data aggregation. They are responsible for aggregating data from different stores and persisting them in a persistent store.\nCurrently, the only available aggregate is \"Account\" , which provides account balance related data. It depends on the \"utxo\" store and the event published by utxo store.","yaci-store-spring-boot-starters#Yaci Store Spring Boot Starters":"Each module in Yaci Store is available as a Spring Boot starter. This means that integrating a specific module into your\napplication is as straightforward as adding its Spring Boot starter as a dependency. This ensures that developers can\neasily integrate Yaci Store into their Spring Boot applications with required modules and minimal configuration.Available Starters:\nyaci-store-spring-boot-starter : This is the core starter that includes all the core modules. This starter includes libraries\nrequired to fetch data from the blockchain and publish events.\nyaci-store-utxo-spring-boot-starter : This starter includes the UTXO store and related configuration including db migration scripts.\nyaci-store-block-spring-boot-starter : This starter includes the block store and related configuration including db migration scripts.\nyaci-store-transaction-spring-boot-starter : This starter includes the transaction store and related configuration including db migration scripts.\nyaci-store-assets-spring-boot-starter : This starter includes the assets store and related configuration including db migration scripts.\nyaci-store-metadata-spring-boot-starter : This starter includes the metadata store and related configuration including db migration scripts.\nyaci-store-script-spring-boot-starter : This starter includes the script store and related configuration including db migration scripts.\nyaci-store-staking-spring-boot-starter : This starter includes the staking store and related configuration including db migration scripts.\nyaci-store-mir-spring-boot-starter : This starter includes the mir store and related configuration including db migration scripts.\nyaci-store-epoch-spring-boot-starter : This starter includes the protocol params module and related configuration including db migration scripts.\nyaci-store-governance-spring-boot-starter : This starter includes governance store and related configuration including db migration scripts.\nyaci-store-account-spring-boot-starter : This starter includes the account aggregate and related configuration including db migration scripts.\nyaci-store-submit-spring-boot-starter : This starter includes the submit module and related configuration including db migration scripts. Submit module is used to submit transactions to nodes.\nyaci-store-remote-spring-boot-starter : This starter includes remote module.\nyaci-store-admin-spring-boot-starter : This starter includes admin module."}},"/stores/overview":{"title":"Overview","data":{"":"//TODO"}},"/usage/aggregation-app-getting-started":{"title":"Aggregation App Getting Started","data":{"aggregation-app-getting-started#Aggregation App Getting Started":"Using yaci-store-aggregation-app, you can track account balance related data. As account balance calculation is a resource intensive task,\nyou need to run this application as a separate application.Similar to main application, place  application.properties in a folder named \"config\"\nin the same directory as the jar file. The application will automatically pick up the configuration file.Swagger UI is available at http://localhost:8081/swagger-ui.htmlThis application can be run in three modes.","mode-1---companion-mode#Mode 1 - Companion Mode":"Read UTxOs from the main database and write account balance to same database.In this mode, the aggregation app will start sync from the genesis block, but it doesn't write any UTxO data to the database.\nIt will only write account balance related data to the database. But it will read UTxOs from the database to calculate account balance.\nSo, you need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.Note: Since this application depends on the main database, it needs to be run after the main application has been started for some time.\nRun aggregation application.\njava -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -jar yaci-store-aggregation-app-<version>.jar","mode-2---standalone-mode#Mode 2 - Standalone Mode":"Write UTxOs and account balance related data to a separate database.In this mode, the aggregation app will start sync from the genesis block and write UTxOs and account balance related data\nto a separate database instead of the main database. So, you don't need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.This mode needs an additional configuration file named application-aggr.properties. You can download this\nfile from download section.Similar to main application, place both  application.properties and application-aggr.properties in a folder named \"config\"\nin the same directory as the jar file. The application will automatically pick up the configuration file.\nEdit datasource properties in application.properties file to point to a separate database.\nEdit application-aggr.properties file to enable flyway migration for the new database.\nMake sure the only following properties are uncommented in application-aggr.properties file.\nstore.account.enabled=true\nstore.extensions.utxo-storage-type=default\nspring.flyway.locations=classpath:db/store/{vendor}\nspring.flyway.out-of-order=true\nlogging.file.name=./logs/yaci-store-aggr.log\nRun aggregation application with aggr profile.\njava -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar","mode-3---standalone-mode-with-rocksdb-utxo-storage-experimental#Mode 3 - Standalone Mode with RocksDB Utxo Storage (Experimental)":"Write UTxOs to embedded RocksDB storage and account balance related data to a separate database.In this mode, the aggregation app will start sync from the genesis block and write UTxOs to an embedded RocksDB storage\nand account balance related data to a separate database instead of the main database. So, you don't need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.This mode needs an additional configuration file named application-aggr.properties. You can download this\nfile from download section.Similar to main application, place both  application.properties and application-aggr.properties in a folder named \"config\"\nEdit datasource properties in application.properties file to point to a separate database.\nEdit application-aggr.properties file to enable flyway migration for the new database.\nMake sure the only following properties are uncommented in application-aggr.properties file.\nstore.account.enabled=true\nspring.flyway.locations=classpath:db/store/{vendor}\nspring.flyway.out-of-order=true\nlogging.file.name=./logs/yaci-store-aggr.log\nstore.rocksdb.base-dir=./rocksdb\nstore.extensions.utxo-storage-type=rocksdb\nstore.extensions.rocksdb-utxo-storage.write-batch-size=3000\nstore.extensions.rocksdb-utxo-storage.parallel-write=true\nRun aggregation application with aggr profile.\njava -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar"}},"/usage/getting-started-as-library":{"title":"Use Yaci Store as a Library","data":{"":"The power of Yaci Store is that it can be used as a library in your own application. This allows you to build your own application on top of Yaci Store.\nYou have full control over what data you want to index. This is achieved by using modular architecture. Not only you can include required stores in\nyour application, you can also override the default behavior of the stores. For example, you can override the default behavior of the Utxo store to store\nutxos in a different database, or store only utxos specific to an address or store metadata with specific labels. This is achieved by using the\nspring framework's dependency injection feature.In this guide, we will show you how to use Yaci Store as a library in your own application.Sample applications:\nSample Metadata Indexer project using Yaci Store as a library.\nA scoped indexer for Ada Handler","prerequisites#Prerequisites":"Java 21\nSpring Boot 3.2.x (Tested with Spring Boot 3.2.0, 3.2.1, 3.2.2)","create-a-spring-boot-application#Create a Spring Boot application":"You can use the Spring Initializr to create a Spring Boot application.","add-dependencies#Add Dependencies":"Apart from standard spring boot dependencies, add the following dependency to your build.gradle or pom.xml file.\nThis will add the Yaci Store Core modules to your project as a dependency. Core modules are responsible for fetching data from the blockchain and\npublishing them as events.\nimplementation 'com.bloxbean.cardano:yaci-store-spring-boot-starter:<version>'\nFor pom.xml\n<dependency>\n    <groupId>com.bloxbean.cardano</groupId>\n    <artifactId>yaci-store-spring-boot-starter</artifactId>\n    <version>{version}</version>\n</dependency>","add-required-store-starters#Add required store starters":"Now you can add the required store starters to your project. For example, if you want to add the metadata store, add the following dependency.\nimplementation 'com.bloxbean.cardano:yaci-store-metadata-spring-boot-starter:<version>'\nFor pom.xml\n<dependency>\n    <groupId>com.bloxbean.cardano</groupId>\n    <artifactId>yaci-store-metadata-spring-boot-starter</artifactId>\n    <version>{version}</version>\n</dependency>\nNote: You can add multiple store starters to your project. Full list of supported starters can be found here","configuration#Configuration":"Add following flyway configuration to your application.yml file. (Mandatory)\nspring:\n  flyway:\n    locations: classpath:db/store/{vendor}\n    out-of-order: true\napiPrefix: /api/v1\nNote: If you are using Yaci Store 0.0.11 or earlier, use classpath:db/migration/{vendor} as the location.You can add your application specific flyway configuration as well. For example, you may want to add another location for your application.\nFlyway location property allows you to specify multiple locations.","yaci-store-configuration-mandatory#Yaci Store Configuration (Mandatory)":"Download the application.properties file from the release section and place it in a folder named \"config\" in your project root directory.\nThe application will automatically pick up the configuration file.Alternatively, you can add all yaci store specific configurations in application.yml file as well.Update configuration file with your own values. Some of the key properties are mentioned below.","network-configuration#Network Configuration":"store.cardano.host=preprod-node.world.dev.cardano.org\nstore.cardano.port=30000\nstore.cardano.protocol-magic=1","database-configuration#Database Configuration":"Uncomment and edit the following properties to configure the database connection.\nspring.datasource.url=\nspring.datasource.username=user\nspring.datasource.password=","optional-configuration#Optional Configuration":"The followings are optional configuration. You can leave them as-is.","genesis-files-configuration#Genesis files Configuration":"Configure genesis files location. This is required for few stores like Utxo store, epoch store, account aggregate etc.\nIf you are using one of the public networks like mainnet, preprod, or preview, you don't need to configure these files as yaci store already includes them.\nstore.cardano.byron-genesis-file=/Users/satya/work/cardano-node/preprod/files/byron-genesis.json\nstore.cardano.shelley-genesis-file=/Users/satya/work/cardano-node/preprod/files/shelley-genesis.json\nstore.cardano.alonzo-genesis-file=/Users/satya/work/cardano-node/preprod/files/alonzo-genesis.json\nstore.cardano.conway-genesis-file=/Users/satya/work/cardano-node/preprod/files/conway-genesis.json","n2c-configuration#N2C Configuration":"The following properties are required for node-to-client (n2c) communication. This is required for transaction submission,\nfetching protocol parameters etc. If you don't need these functionalities, you can leave them commented.\n#store.cardano.n2c-node-socket-path=/Users/satya/work/cardano-node/preprod-9.0.0/db/node.socket\n# If you are accessing n2c through a relay like \"socat\", uncomment and edit the following properties.\n#store.cardano.n2c-host=<relay_host>\n#store.cardano.n2c-port=<relay_port>\nNow you are ready to use Yaci Store in your application. During application startup, Yaci Store will create all the required tables in the database and\nstart syncing the blockchain data and publish them as events and process them.","parallel-processing#Parallel Processing":"To enable parallel processing during the initial sync, which will significantly speed up the sync process, set the following properties:\nstore.executor.enable-parallel-processing=true\nstore.executor.blocks-batch-size=100\nstore.executor.blocks-partition-size=10\nstore.executor.use-virtual-thread-for-batch-processing=true\nstore.executor.use-virtual-thread-for-event-processing=true","customization---override-default-behavior#Customization - Override default behavior":"","custom-storage#Custom Storage":"Yaci Store provides a default storage implementation which stores all data in yaci store defined table.\nBut you can override this default implementation and provide your own storage implementation. Check out sample projects mentioned above for more details.For example: If you only want to store a specific metadata label, you can extend the default storage implementation and filter out the labels you want to store.","custom-processor#Custom Processor":"Ideally you don't need to have your own custom processor, but if you want to do some custom processing, you can listen to both core or derived events and do your custom processing.","rollback-handling#Rollback Handling":"If you are using default storage implementation or a custom storage by extending default storage, Yaci Store will automatically handle rollbacks.But if you have your own custom processor or different storage implementation using separate database/table, you need to handle rollbacks in your custom processor by listening to RollbackEvent.\nFor more details on how to handle rollbacks, check Rollback Handling and also make sure all your operations are idempotent.","remove-optional-indexes-during-initial-sync#Remove Optional Indexes During Initial Sync":"During the initial sync, you can remove some of the optional indexes that are not required. This can help speed up the sync process.\nTo get a list of all optional indexes specific to your store, you can check drop-index.sql\nto find your store-specific optional indexes.However, make sure to add these indexes back after the full sync. You can also find create-index.sql for all optional indexes at the same location."}},"/usage/getting-started-out-of-box":{"title":"Getting Started Out of Box","data":{"use-out-of-the-box-applications#Use out-of-the-box applications":"Yaci Store comes with few applications that you can use out-of-the-box. These applications are designed to be used as-is.\nyaci-store-all: This application bundles all available modules/stores into a single application. If you want to index all available data, this is the application you want.\nyaci-store-utxo-indexer: This application contains utxo store,  protocolparams store and submit module If you want a utxo indexer with transaction submission capability, this is the application you want.\nyaci-store-aggregation-app: This application handles aggregation tasks like account balance calculation. This can be run as a separate application to calculate address balances.\nFor steps to run this application, please refer to Aggregation App Getting Started section.\nThe Jar files for these applications are available in the release section.","run-yaci-store-all-or-yaci-store-utxo-indexer#Run Yaci Store All or Yaci Store Utxo Indexer":"","configuration#Configuration":"Download the application.properties file from the release section and place it in a folder named \"config\" in the same directory as the jar file.\nThe application will automatically pick up the configuration file.Update configuration file with your own values. Some of the key properties are mentioned below.","mandatory-configuration#Mandatory Configuration":"","network-configuration#Network Configuration":"store.cardano.host=preprod-node.world.dev.cardano.org\nstore.cardano.port=30000\nstore.cardano.protocol-magic=1","database-configuration#Database Configuration":"Uncomment and edit the following properties to configure the database connection.\nspring.datasource.url=\nspring.datasource.username=user\nspring.datasource.password=\nAdditional configurations for database connection pool and batch insert.\nspring.datasource.hikari.maximum-pool-size=50\nspring.datasource.hikari.minimum-idle=5\nspring.jpa.properties.hibernate.jdbc.batch_size=100\nspring.jpa.properties.hibernate.order_inserts=true","parallel-processing-configuration#Parallel Processing Configuration":"The following properties are used to configure parallel processing. You can leave them as-is or change them based on\nyour machine configuration.Note: If you are using parallel processing, you also need to configure the database connection pool size accordingly.\nstore.executor.enable-parallel-processing=true\nstore.executor.blocks-batch-size=200\nstore.executor.blocks-partition-size=10\nstore.executor.use-virtual-thread-for-batch-processing=true\nstore.executor.use-virtual-thread-for-event-processing=true","optional-configuration#Optional Configuration":"The followings are optional configuration. You can leave them as-is and jump to the next section Running the application","genesis-files-configuration-for-custom-networks#Genesis files Configuration for custom networks":"This is only required if you are using any custom networks. For following public networks, the genesis files are already available in the application.\nmainnet\npreprod\npreview\nsanchonet\nConfigure genesis files location for custom network\nstore.cardano.byron-genesis-file=/Users/xyz/cardano-node/files/byron-genesis.json\nstore.cardano.shelley-genesis-file=/Users/xyz/cardano-node/files/shelley-genesis.json\nstore.cardano.alonzo-genesis-file=/Users/xyz/work/cardano-node/preprod/files/alonzo-genesis.json\nstore.cardano.conway-genesis-file=/Users/xyz/work/cardano-node/preprod/files/conway-genesis.json","n2c-configuration#N2C Configuration":"The following properties are required for node-to-client (n2c) communication. This is required for transaction submission,\nfetching protocol parameters etc. If you don't need these functionalities, you can leave them as-is.\n#store.cardano.n2c-node-socket-path=/Users/satya/work/cardano-node/preprod-8.1.2/db/node.socket\n# If you are accessing n2c through a relay like \"socat\", uncomment and edit the following properties.\n#store.cardano.n2c-host=<relay_host>\n#store.cardano.n2c-port=<relay_port>","enable--disable-specific-store#Enable / Disable specific store":"Even if you are using yaci-store-all application, you can enable/disable specific stores. For example, if you want to disable utxo store, you can do so by setting the following property to false.\nstore.utxo.enabled=false\nThis property is available for all stores.\nstore.<store_name></store_name>.enabled=false","starting-from-a-specific-point#Starting from a specific point":"By default, sync starts from the genesis block. If you want to start from a specific point, you can do so by setting the following property.\nstore.cardano.sync-start-slot=2738868\nstore.cardano.sync-start-blockhash=\n# For Byron block as start  point\n#store.cardano.sync-start-byron-block-number=2737340\n# For stop point\n#store.cardano.sync-stop-slot=76667163\n#store.cardano.sync-stop-blockhash=","run-as-jar#Run As Jar":"For Yaci Store All, use the following command.\njava -jar yaci-store-all-<version>.jar\nFor Yaci Store Utxo Indexer, use the following command.\njava -jar yaci-store-utxo-indexer-<version>.jar","swagger-ui#Swagger UI":"By default, swagger UI for the application is available at http://localhost:8080/swagger-ui/index.html","db-indexes-after-initial-sync#DB Indexes (After Initial Sync)":"During the initial sync with the yaci-store-all or yaci-store-utxo-indexer apps, the app automatically removes all optional DB indexes\nto speed up the sync process. Once the sync is completed, you need to manually re-apply those missing indexes for faster queries.The SQL file of indexes that need to be re-applied can be found in the GitHub repository:\nYaci Store All App : create-index.sql\nUtxo Indexer App   : create-index.sql"}}}